{
	"info": {
		"_postman_id": "12d11c23-15ab-48ba-823f-039cd52a9417",
		"name": "Salesforce OCI - Commerce APIs",
		"description": "# Salesforce Omni Channel Inventory collection\n\nThis collection contains pre-defined use cases related to the Salesforce Omni Channel Inventory.\nThese use cases cover all the available endpoints from the API.\nMore infos in the [Salesforce Commerce Developer Center](https://developer.commercecloud.com/s/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6732558"
	},
	"item": [
		{
			"name": "IMPEX",
			"item": [
				{
					"name": "Export Availability Records for Location Group",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Availability Records - Trigger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.exportId).to.exist;",
											"    pm.expect(data.exportId).to.be.a.string;",
											"    pm.expect(data.exportStatusLink).to.exist;",
											"    pm.expect(data.exportStatusLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_availability_records_per_location_group_id', data.exportId);",
											"    pm.collectionVariables.set('_export_availability_records_per_location_group_status_link', data.exportStatusLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_availability_records_per_location_group_status_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"objects\": {\n        \"groups\": [\"{{location_group_id}}\"]\n    }\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/exports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Availability Records - Get Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.download).to.exist;",
											"    pm.expect(data.download).to.be.a('object');",
											"    pm.expect(data.download.downloadLink).to.exist;",
											"    pm.expect(data.download.downloadLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_availability_records_per_location_group_download_link', data.download.downloadLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_availability_records_per_location_group_download_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_availability_records_per_location_group_status_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_availability_records_per_location_group_status_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Availability Records - Download File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const lastLine = pm.response.text().substr(responseBody.lastIndexOf('\\n', responseBody.length - 2) + 1);",
											"    const deltaTokenData = JSON.parse(lastLine);",
											"    pm.expect(deltaTokenData.deltaToken).to.exist;",
											"    pm.expect(deltaTokenData.deltaToken).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_availability_records_per_location_group_delta_token', deltaTokenData.deltaToken);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_availability_records_per_location_group_delta_token');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_availability_records_per_location_group_download_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_availability_records_per_location_group_download_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Availability Deltas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.nextDeltaToken).to.exist;",
											"    pm.expect(data.nextDeltaToken).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_availability_records_per_location_group_delta_token', data.nextDeltaToken);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"deltaToken\": \"{{_export_availability_records_per_location_group_delta_token}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-deltas",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-deltas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Availability Records - Delete Export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/exports/{{_export_availability_records_per_location_group_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"exports",
										"{{_export_availability_records_per_location_group_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "# IMPEX - Export Availability Records for Location Group\n\n> Please allow some delays from the time you trigger the export and the time the export is finished, depending on the number of records to export.\n\nThis collection contains the endpoints that allow you to export the availability records from a location group.\nIt saves the `deltaToken` received from Salesforce OCI so that further `Get Availability Deltas` API requests will be based on this last exported state."
				},
				{
					"name": "Export Availability Records for Location",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Availability Records - Trigger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.exportId).to.exist;",
											"    pm.expect(data.exportId).to.be.a.string;",
											"    pm.expect(data.exportStatusLink).to.exist;",
											"    pm.expect(data.exportStatusLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_availability_records_per_location_id', data.exportId);",
											"    pm.collectionVariables.set('_export_availability_records_per_location_status_link', data.exportStatusLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_availability_records_per_location_status_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"objects\": {\n        \"locations\": [\"{{location_id}}\"]\n    }\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/exports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Availability Records - Get Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.download).to.exist;",
											"    pm.expect(data.download).to.be.a('object');",
											"    pm.expect(data.download.downloadLink).to.exist;",
											"    pm.expect(data.download.downloadLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_availability_records_per_location_download_link', data.download.downloadLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_availability_records_per_location_download_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_availability_records_per_location_status_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_availability_records_per_location_status_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Availability Records - Download File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const lastLine = pm.response.text().substr(responseBody.lastIndexOf('\\n', responseBody.length - 2) + 1);",
											"    const deltaTokenData = JSON.parse(lastLine);",
											"    pm.expect(deltaTokenData.deltaToken).to.exist;",
											"    pm.expect(deltaTokenData.deltaToken).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_availability_records_per_location_delta_token', deltaTokenData.deltaToken);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_availability_records_per_location_delta_token');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_availability_records_per_location_download_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_availability_records_per_location_download_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Availability Deltas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.nextDeltaToken).to.exist;",
											"    pm.expect(data.nextDeltaToken).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_availability_records_per_location_delta_token', data.nextDeltaToken);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"deltaToken\": \"{{_export_availability_records_per_location_delta_token}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-deltas",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-deltas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Availability Records - Delete Export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/exports/{{_export_availability_records_per_location_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"exports",
										"{{_export_availability_records_per_location_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "# IMPEX - Export Availability Records for Location\n\n\n> Please allow some delays from the time you trigger the export and the time the export is finished, depending on the number of records to export.\n\nThis collection contains the endpoints that allow you to export the availability records from a location.\nIt saves the `deltaToken` received from Salesforce OCI so that further `Get Availability Deltas` API requests will be based on this last exported state."
				},
				{
					"name": "Export Location Graph",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Location Graph - Trigger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.exportId).to.exist;",
											"    pm.expect(data.exportId).to.be.a.string;",
											"    pm.expect(data.exportStatusLink).to.exist;",
											"    pm.expect(data.exportStatusLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_location_graph_status_id', data.exportId);",
											"    pm.collectionVariables.set('_export_location_graph_status_link', data.exportStatusLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_location_graph_status_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/location-graph/exports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"location-graph",
										"exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Location Graph - Get Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.download).to.exist;",
											"    pm.expect(data.download).to.be.a('object');",
											"    pm.expect(data.download.downloadLink).to.exist;",
											"    pm.expect(data.download.downloadLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_location_graph_download_link', data.download.downloadLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_location_graph_download_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_location_graph_status_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_location_graph_status_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Location Graph - Download File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"",
											"    // Locations tests",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.a('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    // Ensure the location from the environement variables exist",
											"    pm.expect(data.locations.some(location => location === pm.environment.get('location_id'))).to.be.true;",
											"",
											"    // Groups tests",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.a('array');",
											"    pm.expect(data.groups.length).to.be.greaterThan(0);",
											"    // Ensure the group from the environement variables exist",
											"    pm.expect(data.groups.some(group => group.id === pm.environment.get('location_group_id'))).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_location_graph_download_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_location_graph_download_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Location Graph - Delete Export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/location-graph/exports/{{_export_location_graph_status_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"location-graph",
										"exports",
										"{{_export_location_graph_status_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "# IMPEX - Export Location Graph\n\n> Please allow some delays from the time you trigger the export and the time the export is finished, depending on the size of the location graph. \n  \n\nThis collection contains the endpoints that allow you to export the location graph from Salesforce OCI."
				},
				{
					"name": "Import Inventory Records",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Import Availability Records - Get Imports List before starting the import",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the environment variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.imports).to.exist;",
											"    pm.expect(data.imports).to.be.a('array');",
											"",
											"    pm.collectionVariables.set('_import_records_import_list_length', data.imports.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/imports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"imports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Availability Records - Submit Import",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.importId).to.exist;",
											"    pm.expect(data.importId).to.be.a.string;",
											"    pm.expect(data.importStatusLink).to.exist;",
											"    pm.expect(data.importStatusLink).to.be.a.string;",
											"    pm.expect(data.uploadLink).to.exist;",
											"    pm.expect(data.uploadLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_import_availability_records_import_id', data.importId);",
											"    pm.collectionVariables.set('_import_availability_records_status_link', data.importStatusLink);",
											"    pm.collectionVariables.set('_import_availability_records_upload_link', data.uploadLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_import_availability_records_import_id');",
											"pm.collectionVariables.unset('_import_availability_records_status_link');",
											"pm.collectionVariables.unset('_import_availability_records_upload_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fileFormat\": \"{{impex_file_format}}\",\n  \"fileEncoding\": \"{{impex_file_encoding}}\",\n  \"fileHashType\": \"{{impex_file_hash_type}}\",\n  \"fileHash\": \"{{impex_file_hash}}\",\n  \"fileName\": \"{{impex_file_name}}\",\n  \"linkDuration\": {{impex_link_duration}}\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/imports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"imports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Availability Records - Upload File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fileUpload",
											"type": "file",
											"src": "/Users/jbachelet/Downloads/1690381862678.json.gz"
										}
									]
								},
								"url": {
									"raw": "{{api_url}}{{_import_availability_records_upload_link}}",
									"host": [
										"{{api_url}}{{_import_availability_records_upload_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Availability Records - Get Import Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.import).to.exist;",
											"    pm.expect(data.import).to.be.a('object');",
											"    pm.expect(data.import.fullResults).to.exist;",
											"    pm.expect(data.import.fullResults).to.be.a('object');",
											"    pm.expect(data.import.fullResults.href).to.exist;",
											"    pm.expect(data.import.fullResults.href).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_import_availability_records_status_report_link', data.import.fullResults.href);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_import_availability_records_status_report_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}{{_import_availability_records_status_link}}",
									"host": [
										"{{api_url}}{{_import_availability_records_status_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Import Availability Records - Get Imports List after the import has been proceed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the environment variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.imports).to.exist;",
											"    pm.expect(data.imports).to.be.a('array');",
											"    pm.expect(data.imports).to.be.greaterThan(parseInt(pm.collectionVariables.get('_import_records_import_list_length'), 10));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/imports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"imports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Availability Records - Get Import Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}{{_import_availability_records_status_report_link}}",
									"host": [
										"{{api_url}}{{_import_availability_records_status_report_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Inventory import",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/imports/{{_import_availability_records_import_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"imports",
										"{{_import_availability_records_import_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "# IMPEX - Import Inventory Records\n\n> Please allow some delays from the time you upload the file and the time the import is completed, depending on the number of records to import.\n\nThis collection contains the endpoints that allow you to import the availability records within Salesforce OCI."
				},
				{
					"name": "Import Product Segmentations",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Product Segmentations - Submit Import",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.importId).to.exist;",
											"    pm.expect(data.importId).to.be.a.string;",
											"    pm.expect(data.importStatusLink).to.exist;",
											"    pm.expect(data.importStatusLink).to.be.a.string;",
											"    pm.expect(data.uploadLink).to.exist;",
											"    pm.expect(data.uploadLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_import_product_segmentations_import_id', data.importId);",
											"    pm.collectionVariables.set('_import_product_segmentations_status_link', data.importStatusLink);",
											"    pm.collectionVariables.set('_import_product_segmentations_upload_link', data.uploadLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_import_product_segmentations_import_id');",
											"pm.collectionVariables.unset('_import_product_segmentations_status_link');",
											"pm.collectionVariables.unset('_import_product_segmentations_upload_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fileFormat\": \"{{impex_file_format}}\",\n  \"fileEncoding\": \"{{impex_file_encoding}}\",\n  \"fileHashType\": \"{{impex_file_hash_type}}\",\n  \"fileHash\": \"{{impex_file_hash}}\",\n  \"fileName\": \"{{impex_file_name}}\",\n  \"linkDuration\": {{impex_link_duration}}\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/product-segmentation/imports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"product-segmentation",
										"imports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Product Segmentations - Upload File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fileUpload",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{api_url}}{{_import_product_segmentations_upload_link}}",
									"host": [
										"{{api_url}}{{_import_product_segmentations_upload_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Product Segmentations - Get Import Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.import).to.exist;",
											"    pm.expect(data.import).to.be.a('object');",
											"    pm.expect(data.import.fullResults).to.exist;",
											"    pm.expect(data.import.fullResults).to.be.a('object');",
											"    pm.expect(data.import.fullResults.href).to.exist;",
											"    pm.expect(data.import.fullResults.href).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_import_product_segmentations_status_report_link', data.import.fullResults.href);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_import_product_segmentations_status_report_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}{{_import_product_segmentations_status_link}}",
									"host": [
										"{{api_url}}{{_import_product_segmentations_status_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Product Segmentations - Get Import Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}{{_import_product_segmentations_status_report_link}}",
									"host": [
										"{{api_url}}{{_import_product_segmentations_status_report_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Product Segmentations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/imports/{{_import_product_segmentations_import_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"imports",
										"{{_import_product_segmentations_import_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "# IMPEX - Import Product Segmentations\n\n> Please allow some delays from the time you upload the file and the time the import is completed, depending on the number of records to import. \n  \n\nThis collection contains the endpoints that allow you to import the availability records within Salesforce OCI."
				},
				{
					"name": "Export Product Segmentations",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Product Segmentations - Trigger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.exportId).to.exist;",
											"    pm.expect(data.exportId).to.be.a.string;",
											"    pm.expect(data.exportStatusLink).to.exist;",
											"    pm.expect(data.exportStatusLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_product_segmentations_status_id', data.exportId);",
											"    pm.collectionVariables.set('_export_product_segmentations_status_link', data.exportStatusLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_product_segmentations_status_id');",
											"pm.collectionVariables.unset('_export_product_segmentations_status_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/product-segmentation/exports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"product-segmentation",
										"exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Product Segmentations - Get Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.download).to.exist;",
											"    pm.expect(data.download).to.be.a('object');",
											"    pm.expect(data.download.downloadLink).to.exist;",
											"    pm.expect(data.download.downloadLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_product_segmentations_download_link', data.download.downloadLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_product_segmentations_download_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_product_segmentations_status_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_product_segmentations_status_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Product Segmentations - Download File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_product_segmentations_download_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_product_segmentations_download_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Product Segmentations - Delete Export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/product-segmentation/exports/{{_export_product_segmentations_status_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"product-segmentation",
										"exports",
										"{{_export_product_segmentations_status_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "# IMPEX - Export Product Segmentations\n\n> Please allow some delays from the time you trigger the export and the time the export is finished, depending on the size of the location graph. \n  \n\nThis collection contains the endpoints that allow you to export the product segmentations from Salesforce OCI."
				},
				{
					"name": "Export Event logs",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Event Logs - Submit Export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.exportStatusLink).to.exist;",
											"    pm.expect(data.exportStatusLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_event_log_status_link', data.exportStatusLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_event_log_status_link');",
											"",
											"// Compute export dates (last month of activity)",
											"const start = new Date();",
											"start.setMonth(start.getMonth() - 1);",
											"",
											"pm.collectionVariables.set('_event_log_export_end', new Date().toISOString());",
											"pm.collectionVariables.set('_event_log_export_start', start.toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"endsOn\": \"{{_event_log_export_end}}\",\n    \"locations\": [\n        \"store_inventory_Berluti_BF4\"\n    ],\n    \"sku\": \"182636\",\n    \"startsOn\": \"{{_event_log_export_start}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/impex/{{api_version}}/organizations/{{tenant_group_id}}/event-log/exports",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"impex",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"event-log",
										"exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Event Logs - Get Export Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body and save the values to the variables', () => {",
											"    const data = pm.response.json();",
											"",
											"    pm.expect(data.status).to.exist;",
											"    pm.expect(data.status).to.be.a.string;",
											"    pm.expect(data.download).to.exist;",
											"    pm.expect(data.download).to.be.a('object');",
											"    pm.expect(data.download.downloadLink).to.exist;",
											"    pm.expect(data.download.downloadLink).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_export_event_log_activity_link', data.download.downloadLink);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_export_event_log_activity_link');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_event_log_status_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_event_log_status_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Event Logs - Download event logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/{{_export_event_log_activity_link}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"{{_export_event_log_activity_link}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "# IMPEX - Export Event Logs\n\n> Please allow some delays from the time you trigger the export and the time the export is finished, depending on the size of the location graph. \n  \n\nThis collection contains the endpoints that allow you to export the event logs from Salesforce OCI."
				}
			],
			"description": "# Salesforce Omni Channel Inventory\n\n## Impex\n\nThis collection contains use cases related to the inventory import/export operations.\n\nMore infos [Salesforce Commerce Developer Center](https://developer.commercecloud.com/s/api-details/a003k00000Wa43kAAB/commerce-cloud-developer-centerinventoryimpex)"
		},
		{
			"name": "AVAILABILITY",
			"item": [
				{
					"name": "Batch update availability records",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability By Locations for the product we will update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eql(pm.environment.get('location_id'));",
											"    pm.expect(data.locations[0].records).to.exist;",
											"    pm.expect(data.locations[0].records).to.be.an('array');",
											"    pm.expect(data.locations[0].records.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0].records[0].sku).to.be.eql(pm.environment.get('product_sku'));",
											"",
											"    pm.collectionVariables.set('_batch_update_record_safety', data.locations[0].records[0].safetyStockCount);",
											"    pm.collectionVariables.set('_batch_update_record_onHand', data.locations[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_batch_update_record_safety');",
											"pm.collectionVariables.unset('_batch_update_record_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Update Inventory Records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_batch_update_record_uuid', uuidv4());",
											"",
											"pm.collectionVariables.set('_batch_update_record_new_future', getRandom(50, 500));",
											"pm.collectionVariables.set('_batch_update_record_new_safety', getRandom(1, 20));",
											"pm.collectionVariables.set('_batch_update_record_new_onHand', getRandom(50, 500));",
											"let now = new Date();",
											"pm.collectionVariables.set('_batch_update_record_current_date', now.toISOString());",
											"now.setDate(now.getDate() + 10);",
											"pm.collectionVariables.set('_batch_update_record_future_date', now.toISOString());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}",
											"",
											"// Get a random number between the {min} and {max}",
											"function getRandom(min, max) {",
											"    return Math.floor(Math.random() * (max - min) + min);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"records\": [{\n\t\t\"sku\": \"{{product_sku}}\",\n\t\t\"location\": \"{{location_id}}\",\n\t\t\"id\": \"{{_batch_update_record_uuid}}\",\n\t\t\"externalRefId\": \"{{product_sku}}\",\n\t\t\"futureStock\": [{\n\t\t\t\"expectedDate\": \"{{_batch_update_record_future_date}}\",\n\t\t\t\"quantity\": 8\n\t\t}],\n\t\t\"effectiveDate\": \"{{_batch_update_record_current_date}}\",\n\t\t\"onHand\": {{_batch_update_record_new_onHand}},\n        \"safetyStockCount\": {{_batch_update_record_new_safety}}\n\t}]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/batch-update",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"batch-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability By Locations for the updated product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"    pm.expect(data.locations[0].records).to.exist;",
											"    pm.expect(data.locations[0].records).to.be.an('array');",
											"    pm.expect(data.locations[0].records.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0].records[0].sku).to.be.eq(pm.environment.get('product_sku'));",
											"",
											"    const record = data.locations[0].records[0];",
											"    // Test updated values",
											"    pm.expect(record.onHand).to.be.eq(pm.collectionVariables.get('_batch_update_record_new_onHand'));",
											"    pm.expect(record.safetyStockCount).to.be.eq(pm.collectionVariables.get('_batch_update_record_new_safety'));",
											"    pm.expect(record.futures[0].quantity).to.be.eq(pm.collectionVariables.get('_batch_update_record_new_future'));",
											"    // Test calculated values",
											"    pm.expect(record.atf).to.be.eq(record.onHand - record.reserved - record.safetyStockCount);",
											"    pm.expect(record.ato).to.be.eq((record.onHand + record.futures[0].quantity) - record.reserved - record.safetyStockCount);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					],
					"description": "# AVAILABILITY - Get Availability records\n\nThis collection contains the endpoints that allow you to get the availability records related to the given `{{product_sku}}` in the given location, or both a group and a location"
				},
				{
					"name": "Replace Inventory Record within location",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability By Locations for the product we will update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eql(pm.environment.get('location_id'));",
											"    pm.expect(data.locations[0].records).to.exist;",
											"    pm.expect(data.locations[0].records).to.be.an('array');",
											"    pm.expect(data.locations[0].records.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0].records[0].sku).to.be.eql(pm.environment.get('product_sku'));",
											"",
											"    pm.collectionVariables.set('_replace_inventory_record_safety', data.locations[0].records[0].safetyStockCount);",
											"    pm.collectionVariables.set('_replace_inventory_record_onHand', data.locations[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_replace_inventory_record_safety');",
											"pm.collectionVariables.unset('_replace_inventory_record_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Inventory Record within Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_replace_inventory_record_request_id', uuidv4());",
											"",
											"",
											"pm.collectionVariables.set('_replace_inventory_record_new_future', getRandom(50, 500));",
											"pm.collectionVariables.set('_replace_inventory_record_new_safety', getRandom(1, 20));",
											"pm.collectionVariables.set('_replace_inventory_record_new_onHand', getRandom(50, 500));",
											"let now = new Date();",
											"pm.collectionVariables.set('_replace_inventory_record_current_date', now.toISOString());",
											"now.setDate(now.getDate() + 10);",
											"pm.collectionVariables.set('_replace_inventory_record_future_date', now.toISOString());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}",
											"",
											"// Get a random number between the {min} and {max}",
											"function getRandom(min, max) {",
											"    return Math.floor(Math.random() * (max - min) + min);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"externalRefId\": \"{{product_sku}}\",\n    \"futureStock\": [{\n        \"expectedDate\": \"{{_replace_inventory_record_future_date}}\",\n        \"quantity\": {{_replace_inventory_record_new_future}}\n    }],\n    \"effectiveDate\": \"{{_replace_inventory_record_current_date}}\",\n    \"onHand\": {{_replace_inventory_record_new_onHand}},\n    \"safetyStockCount\": {{_replace_inventory_record_new_safety}}\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/locations/{{location_id}}/availability-records/skus/{{product_sku}}/{{_replace_inventory_record_request_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"locations",
										"{{location_id}}",
										"availability-records",
										"skus",
										"{{product_sku}}",
										"{{_replace_inventory_record_request_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability By Locations for the updated product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"    pm.expect(data.locations[0].records).to.exist;",
											"    pm.expect(data.locations[0].records).to.be.an('array');",
											"    pm.expect(data.locations[0].records.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0].records[0].sku).to.be.eq(pm.environment.get('product_sku'));",
											"",
											"    const record = data.locations[0].records[0];",
											"    // Test updated values",
											"    pm.expect(record.onHand).to.be.eq(pm.collectionVariables.get('_replace_inventory_record_new_onHand'));",
											"    pm.expect(record.safetyStockCount).to.be.eq(pm.collectionVariables.get('_replace_inventory_record_new_safety'));",
											"    pm.expect(record.futures[0].quantity).to.be.eq(pm.collectionVariables.get('_replace_inventory_record_new_future'));",
											"    // Test calculated values",
											"    pm.expect(record.atf).to.be.eq(record.onHand - record.reserved - record.safetyStockCount);",
											"    pm.expect(record.ato).to.be.eq((record.onHand + record.futures[0].quantity) - record.reserved - record.safetyStockCount);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					],
					"description": "# AVAILABILITY - Replace Inventory Record within location\n\nThis collection contains the endpoints that allow you to replace the inventory records related to the given `{{product_sku}}` in the given location"
				},
				{
					"name": "Update Inventory Record within location",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability By Locations for the product we will update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eql(pm.environment.get('location_id'));",
											"    pm.expect(data.locations[0].records).to.exist;",
											"    pm.expect(data.locations[0].records).to.be.an('array');",
											"    pm.expect(data.locations[0].records.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0].records[0].sku).to.be.eql(pm.environment.get('product_sku'));",
											"",
											"    pm.collectionVariables.set('_update_inventory_record_safety', data.locations[0].records[0].safetyStockCount);",
											"    pm.collectionVariables.set('_update_inventory_record_onHand', data.locations[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_update_inventory_record_safety');",
											"pm.collectionVariables.unset('_update_inventory_record_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Inventory Record within Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_update_inventory_record_request_id', uuidv4());",
											"",
											"",
											"pm.collectionVariables.set('_update_inventory_record_new_future', getRandom(50, 500));",
											"pm.collectionVariables.set('_update_inventory_record_new_safety', getRandom(1, 20));",
											"pm.collectionVariables.set('_update_inventory_record_new_onHand', getRandom(50, 500));",
											"let now = new Date();",
											"pm.collectionVariables.set('_update_inventory_record_current_date', now.toISOString());",
											"now.setDate(now.getDate() + 10);",
											"pm.collectionVariables.set('_update_inventory_record_future_date', now.toISOString());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}",
											"",
											"// Get a random number between the {min} and {max}",
											"function getRandom(min, max) {",
											"    return Math.floor(Math.random() * (max - min) + min);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"externalRefId\": \"{{product_sku}}\",\n    \"futureStock\": [{\n        \"expectedDate\": \"{{_update_inventory_record_future_date}}\",\n        \"quantity\": {{_update_inventory_record_new_future}}\n    }],\n    \"effectiveDate\": \"{{_update_inventory_record_current_date}}\",\n    \"onHand\": {{_update_inventory_record_new_onHand}},\n    \"safetyStockCount\": {{_update_inventory_record_new_safety}}\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/locations/{{location_id}}/availability-records/skus/{{product_sku}}/{{_update_inventory_record_request_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"locations",
										"{{location_id}}",
										"availability-records",
										"skus",
										"{{product_sku}}",
										"{{_update_inventory_record_request_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability By Locations for the updated product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"    pm.expect(data.locations[0].records).to.exist;",
											"    pm.expect(data.locations[0].records).to.be.an('array');",
											"    pm.expect(data.locations[0].records.length).to.be.eq(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					],
					"description": "# AVAILABILITY - Update Inventory Record within location\n\nThis collection contains the endpoints that allow you to update the inventory records related to the given `{{product_sku}}` in the given location"
				},
				{
					"name": "Delete Inventory Record within location",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability By Locations for the product we will update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eql(pm.environment.get('location_id'));",
											"    pm.expect(data.locations[0].records).to.exist;",
											"    pm.expect(data.locations[0].records).to.be.an('array');",
											"    pm.expect(data.locations[0].records.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0].records[0].sku).to.be.eql(pm.environment.get('product_sku'));",
											"",
											"    pm.collectionVariables.set('_update_inventory_record_safety', data.locations[0].records[0].safetyStockCount);",
											"    pm.collectionVariables.set('_update_inventory_record_onHand', data.locations[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_update_inventory_record_safety');",
											"pm.collectionVariables.unset('_update_inventory_record_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Inventory Record within Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_delete_inventory_record_request_id', uuidv4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/locations/{{location_id}}/availability-records/skus/{{product_sku}}/{{_delete_inventory_record_request_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"locations",
										"{{location_id}}",
										"availability-records",
										"skus",
										"{{product_sku}}",
										"{{_delete_inventory_record_request_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability By Locations for the updated product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"    pm.expect(data.locations[0].records).to.exist;",
											"    pm.expect(data.locations[0].records).to.be.an('array');",
											"    pm.expect(data.locations[0].records.length).to.be.greaterThan(0);",
											"    pm.expect(data.locations[0].records[0].sku).to.be.eq(pm.environment.get('product_sku'));",
											"",
											"    const record = data.locations[0].records[0];",
											"    // Test updated values",
											"    pm.expect(record.onHand).to.be.eq(pm.collectionVariables.get('_update_inventory_record_new_onHand'));",
											"    pm.expect(record.safetyStockCount).to.be.eq(pm.collectionVariables.get('_update_inventory_record_new_safety'));",
											"    pm.expect(record.futures[0].quantity).to.be.eq(pm.collectionVariables.get('_update_inventory_record_new_future'));",
											"    // Test calculated values",
											"    pm.expect(record.atf).to.be.eq(record.onHand - record.reserved - record.safetyStockCount);",
											"    pm.expect(record.ato).to.be.eq((record.onHand + record.futures[0].quantity) - record.reserved - record.safetyStockCount);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					],
					"description": "# AVAILABILITY - Delete Inventory Record within location\n\nThis collection contains the endpoints that allow you to delete the inventory records related to the given `{{product_sku}}` in the given location"
				},
				{
					"name": "Get Availability records by location group",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Availability By Location Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					],
					"description": "# AVAILABILITY - Get Availability records\n\nThis collection contains the endpoints that allow you to get the availability records related to the given `{{product_sku}}` in the given location, or both a group and a location"
				},
				{
					"name": "Get Availability records by locations",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Availability By Locations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eql(pm.environment.get('location_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					],
					"description": "# AVAILABILITY - Get Availability records\n\nThis collection contains the endpoints that allow you to get the availability records related to the given `{{product_sku}}` in the given location, or both a group and a location"
				},
				{
					"name": "Get Availability records by locations and location groups",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Availability By Locations and Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groups\": [\n        \"{{location_group_id}}\"\n    ],\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					],
					"description": "# AVAILABILITY - Get Availability records\n\nThis collection contains the endpoints that allow you to get the availability records related to the given `{{product_sku}}` in the given location, or both a group and a location"
				}
			],
			"description": "# Salesforce Omni Channel Inventory\n\n## Availability\n\nThis collection contains use cases related to the inventory availability operations.\n\nMore infos [Salesforce Commerce Developer Center](https://developer.commercecloud.com/s/api-details/a003k00000Wa43pAAB/commerce-cloud-developer-centerinventoryavailability)"
		},
		{
			"name": "RESERVATIONS",
			"item": [
				{
					"name": "Create reservation against location group, transfer it to location and fulfill it",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group before the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.not.be.empty;",
											"    pm.expect(data.groups[0].id).to.be.eq(pm.environment.get('location_group_id'));",
											"",
											"    // Save availability values into variables",
											"    const location = data.locations.filter(location => location.id === pm.environment.get('location_id'))[0];",
											"    pm.expect(location).to.exist;",
											"    pm.expect(location).to.be.an('object');",
											"    ",
											"    pm.collectionVariables.set('_location_availability_before_reservation_atf', location.records[0].atf);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_ato', location.records[0].ato);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_reserved', location.records[0].reserved);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_onHand', location.records[0].onHand);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_atf', data.groups[0].records[0].atf);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_ato', data.groups[0].records[0].ato);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_reserved', data.groups[0].records[0].reserved);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_onHand', data.groups[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_location_availability_before_reservation_atf');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_ato');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_reserved');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_onHand');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_atf');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_ato');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_reserved');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create reservation against location group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.success).to.exist;",
											"    pm.expect(data.success).to.be.true;",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.be.eql(pm.environment.get('location_group_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_reservation_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"externalRefId\": \"{{reservation_external_reference_id}}\",\n\t\"expirationSeconds\": 300,\n\t\"allowPartialReservations\": true,\n\t\"groups\": [{\n\t\t\"id\": \"{{location_group_id}}\",\n\t\t\"reservations\": [{\n\t\t\t\"sku\": \"{{product_sku}}\",\n\t\t\t\"quantity\": 1\n\t\t}]\n\t}]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/reservation-documents/{{_reservation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"reservation-documents",
										"{{_reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group after the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    const group = data.groups.filter(group => group.id === pm.environment.get('location_group_id'))[0];",
											"    pm.expect(group).to.exist;",
											"    pm.expect(group).to.be.an('object');",
											"    pm.expect(group.id).to.not.be.empty;",
											"",
											"    // Confirm that the reservation has changed the inventory values",
											"    pm.expect(group.records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(group.records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(group.records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_reserved'), 10) + 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer reservation from group to location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_transfer_unique_request_id', uuidv4());",
											"pm.collectionVariables.set('_reservation_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uniqueRequestId\": \"{{_transfer_unique_request_id}}\",\n\t\"records\": [{\n        \"externalRefId\": \"{{transfer_external_reference_id}}\",\n        \"id\": \"{{_reservation_id}}\",\n        \"sku\": \"{{product_sku}}\",\n        \"quantity\": 1,\n        \"from\": {\n            \"group\": \"{{location_group_id}}\"\n        },\n        \"to\": {\n            \"location\": \"{{location_id}}\"\n        }\n    }]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/transfers",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.not.be.empty;",
											"    pm.expect(data.groups[0].id).to.be.eq(pm.environment.get('location_group_id'));",
											"",
											"    // Confirm that the transfer has changed the inventory values",
											"    const location = data.locations.filter(location => location.id === pm.environment.get('location_id'))[0];",
											"    pm.expect(location).to.exist;",
											"",
											"    pm.expect(location.records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(location.records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(location.records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_reserved'), 10) + 1);",
											"    pm.expect(data.groups[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_reserved'), 10)+ 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fulfill reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_fulfillment_unique_request_id', uuidv4());",
											"pm.collectionVariables.set('_fulfillment_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"records\": [{\n        \"uniqueRequestId\": \"{{_fulfillment_unique_request_id}}\",\n        \"externalRefId\": \"{{fulfillment_external_refernce_id}}\",\n        \"id\": \"{{_fulfillment_id}}\",\n        \"location\": \"{{location_id}}\",\n        \"sku\": \"{{product_sku}}\",\n        \"quantity\": 1\n    }]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/fulfillments",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"fulfillments"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location after the fulfillment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    const location = data.locations.filter(location => location.id === pm.environment.get('location_id'))[0];",
											"    pm.expect(location).to.exist;",
											"    pm.expect(location).to.be.an('object');",
											"    pm.expect(location.id).to.not.be.empty;",
											"",
											"    // Confirm that the fulfillment has changed the inventory values",
											"",
											"    pm.expect(location.records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(location.records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(location.records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_reserved'), 10));",
											"    pm.expect(location.records[0].onHand).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_onHand'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_reserved'), 10));",
											"    pm.expect(data.groups[0].records[0].onHand).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_onHand'), 10) - 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create reservation against location group and release it",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group before the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.not.be.empty;",
											"    pm.expect(data.groups[0].id).to.be.eq(pm.environment.get('location_group_id'));",
											"",
											"    // Save availability values into variables",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_atf', data.groups[0].records[0].atf);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_ato', data.groups[0].records[0].ato);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_reserved', data.groups[0].records[0].reserved);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_onHand', data.groups[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_atf');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_ato');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_reserved');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create reservation against location group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.success).to.exist;",
											"    pm.expect(data.success).to.be.true;",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.be.eql(pm.environment.get('location_group_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_reservation_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"externalRefId\": \"{{reservation_external_reference_id}}\",\n\t\"expirationSeconds\": 300,\n\t\"allowPartialReservations\": true,\n\t\"groups\": [{\n\t\t\"id\": \"{{location_group_id}}\",\n\t\t\"reservations\": [{\n\t\t\t\"sku\": \"{{product_sku}}\",\n\t\t\t\"quantity\": 1\n\t\t}]\n\t}]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/reservation-documents/{{_reservation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"reservation-documents",
										"{{_reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group after the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.not.be.empty;",
											"    pm.expect(data.groups[0].id).to.be.eq(pm.environment.get('location_group_id'));",
											"",
											"    // Confirm that the reservation has changed the inventory values",
											"    pm.expect(data.groups[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_reserved'), 10) + 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_release_unique_request_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"records\": [{\n        \"id\": \"{{_release_unique_request_id}}\",\n        \"externalRefId\": \"{{release_external_reference_id}}\",\n        \"group\": \"{{location_group_id}}\",\n        \"sku\": \"{{product_sku}}\",\n        \"quantity\": 1\n    }]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/releases",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"releases"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group after the release",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.not.be.empty;",
											"    pm.expect(data.groups[0].id).to.be.eq(pm.environment.get('location_group_id'));",
											"",
											"    // Confirm that the release has changed the inventory values",
											"    pm.expect(data.groups[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_atf'), 10));",
											"    pm.expect(data.groups[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_ato'), 10));",
											"    pm.expect(data.groups[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_reserved'), 10));",
											"    pm.expect(data.groups[0].records[0].onHand).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_onHand'), 10));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create reservation against location group and cancel it",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group before the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.not.be.empty;",
											"    pm.expect(data.groups[0].id).to.be.eq(pm.environment.get('location_group_id'));",
											"",
											"    // Save availability values into variables",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_atf', data.groups[0].records[0].atf);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_ato', data.groups[0].records[0].ato);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_reserved', data.groups[0].records[0].reserved);",
											"    pm.collectionVariables.set('_location_group_availability_before_reservation_onHand', data.groups[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_atf');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_ato');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_reserved');",
											"pm.collectionVariables.unset('_location_group_availability_before_reservation_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create reservation against location group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.success).to.exist;",
											"    pm.expect(data.success).to.be.true;",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.be.eql(pm.environment.get('location_group_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_reservation_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"externalRefId\": \"{{reservation_external_reference_id}}\",\n\t\"expirationSeconds\": 300,\n\t\"allowPartialReservations\": true,\n\t\"groups\": [{\n\t\t\"id\": \"{{location_group_id}}\",\n\t\t\"reservations\": [{\n\t\t\t\"sku\": \"{{product_sku}}\",\n\t\t\t\"quantity\": 1\n\t\t}]\n\t}]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/reservation-documents/{{_reservation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"reservation-documents",
										"{{_reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group after the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.not.be.empty;",
											"    pm.expect(data.groups[0].id).to.be.eq(pm.environment.get('location_group_id'));",
											"",
											"    // Confirm that the reservation has changed the inventory values",
											"    pm.expect(data.groups[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(data.groups[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_reserved'), 10) + 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"CANCELLED\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/reservation-documents/{{_reservation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"reservation-documents",
										"{{_reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location group after the cancellation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.groups).to.exist;",
											"    pm.expect(data.groups).to.be.an('array');",
											"    pm.expect(data.groups).to.not.be.empty;",
											"    pm.expect(data.groups[0]).to.exist;",
											"    pm.expect(data.groups[0]).to.be.an('object');",
											"    pm.expect(data.groups[0].id).to.not.be.empty;",
											"    pm.expect(data.groups[0].id).to.be.eq(pm.environment.get('location_group_id'));",
											"",
											"    // Confirm that the cancellation has changed the inventory values",
											"    pm.expect(data.groups[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_atf'), 10));",
											"    pm.expect(data.groups[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_ato'), 10));",
											"    pm.expect(data.groups[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_reserved'), 10));",
											"    pm.expect(data.groups[0].records[0].onHand).to.be.eq(parseInt(pm.collectionVariables.get('_location_group_availability_before_reservation_onHand'), 10));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"{{location_group_id}}\",\n    \"sku\": \"{{product_sku}}\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create reservation against location and fulfill it",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location before the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Save availability values into variables",
											"    pm.collectionVariables.set('_location_availability_before_reservation_atf', data.locations[0].records[0].atf);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_ato', data.locations[0].records[0].ato);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_reserved', data.locations[0].records[0].reserved);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_onHand', data.locations[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_location_availability_before_reservation_atf');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_ato');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_reserved');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create reservation against location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.success).to.exist;",
											"    pm.expect(data.success).to.be.true;",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eql(pm.environment.get('location_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_reservation_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"externalRefId\": \"{{reservation_external_reference_id}}\",\n\t\"expirationSeconds\": 300,\n\t\"allowPartialReservations\": true,\n\t\"locations\": [{\n\t\t\"id\": \"{{location_id}}\",\n\t\t\"reservations\": [{\n\t\t\t\"sku\": \"{{product_sku}}\",\n\t\t\t\"quantity\": 1\n\t\t}]\n\t}]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/reservation-documents/{{_reservation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"reservation-documents",
										"{{_reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location after the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Confirm that the reservation has changed the inventory values",
											"    pm.expect(data.locations[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(data.locations[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(data.locations[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_reserved'), 10) + 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fulfill reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_fulfillment_unique_request_id', uuidv4());",
											"pm.collectionVariables.set('_fulfillment_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"records\": [{\n        \"uniqueRequestId\": \"{{_fulfillment_unique_request_id}}\",\n        \"externalRefId\": \"{{fulfillment_external_refernce_id}}\",\n        \"id\": \"{{_fulfillment_id}}\",\n        \"location\": \"{{location_id}}\",\n        \"sku\": \"{{product_sku}}\",\n        \"quantity\": 1\n    }]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/fulfillments",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"fulfillments"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location after the fulfillment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Confirm that the fulfillment has changed the inventory values",
											"    pm.expect(data.locations[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(data.locations[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(data.locations[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_reserved'), 10));",
											"    pm.expect(data.locations[0].records[0].onHand).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_onHand'), 10) - 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create reservation against location and release it",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location before the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Save availability values into variables",
											"    pm.collectionVariables.set('_location_availability_before_reservation_atf', data.locations[0].records[0].atf);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_ato', data.locations[0].records[0].ato);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_reserved', data.locations[0].records[0].reserved);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_onHand', data.locations[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_location_availability_before_reservation_atf');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_ato');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_reserved');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create reservation against location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.success).to.exist;",
											"    pm.expect(data.success).to.be.true;",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eql(pm.environment.get('location_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_reservation_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"externalRefId\": \"{{reservation_external_reference_id}}\",\n\t\"expirationSeconds\": 300,\n\t\"allowPartialReservations\": true,\n\t\"locations\": [{\n\t\t\"id\": \"{{location_id}}\",\n\t\t\"reservations\": [{\n\t\t\t\"sku\": \"{{product_sku}}\",\n\t\t\t\"quantity\": 1\n\t\t}]\n\t}]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/reservation-documents/{{_reservation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"reservation-documents",
										"{{_reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location after the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Confirm that the reservation has changed the inventory values",
											"    pm.expect(data.locations[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(data.locations[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(data.locations[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_reserved'), 10) + 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_release_unique_request_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"records\": [{\n        \"id\": \"{{_release_unique_request_id}}\",\n        \"externalRefId\": \"{{release_external_reference_id}}\",\n        \"location\": \"{{location_id}}\",\n        \"sku\": \"{{product_sku}}\",\n        \"quantity\": 1\n    }]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/releases",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"releases"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location after the release",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Confirm that the release has changed the inventory values",
											"    pm.expect(data.locations[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_atf'), 10));",
											"    pm.expect(data.locations[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_ato'), 10));",
											"    pm.expect(data.locations[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_reserved'), 10));",
											"    pm.expect(data.locations[0].records[0].onHand).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_onHand'), 10));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create reservation against location and cancel it",
					"item": [
						{
							"name": "Authentication against the Salesforce Commerce API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.token_type).to.exist;",
											"    pm.expect(data.token_type).to.be.a.string;",
											"    pm.expect(data.access_token).to.exist;",
											"    pm.expect(data.access_token).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_authorization_key', `${data.token_type} ${data.access_token}`);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_authorization_key');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{api_scopes}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location before the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Save availability values into variables",
											"    pm.collectionVariables.set('_location_availability_before_reservation_atf', data.locations[0].records[0].atf);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_ato', data.locations[0].records[0].ato);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_reserved', data.locations[0].records[0].reserved);",
											"    pm.collectionVariables.set('_location_availability_before_reservation_onHand', data.locations[0].records[0].onHand);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean up the variables",
											"pm.collectionVariables.unset('_location_availability_before_reservation_atf');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_ato');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_reserved');",
											"pm.collectionVariables.unset('_location_availability_before_reservation_onHand');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create reservation against location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.success).to.exist;",
											"    pm.expect(data.success).to.be.true;",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.be.eql(pm.environment.get('location_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('_reservation_id', uuidv4());",
											"",
											"// Generates a valid UUID v4 as per RFC4122: https://www.ietf.org/rfc/rfc4122.txt",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"externalRefId\": \"{{reservation_external_reference_id}}\",\n\t\"expirationSeconds\": 300,\n\t\"allowPartialReservations\": true,\n\t\"locations\": [{\n\t\t\"id\": \"{{location_id}}\",\n\t\t\"reservations\": [{\n\t\t\t\"sku\": \"{{product_sku}}\",\n\t\t\t\"quantity\": 1\n\t\t}]\n\t}]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/reservation-documents/{{_reservation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"reservation-documents",
										"{{_reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location after the reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Confirm that the reservation has changed the inventory values",
											"    pm.expect(data.locations[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_atf'), 10) - 1);",
											"    pm.expect(data.locations[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_ato'), 10) - 1);",
											"    pm.expect(data.locations[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_reserved'), 10) + 1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"CANCELLED\"\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/reservation/{{api_version}}/organizations/{{tenant_group_id}}/reservation-documents/{{_reservation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"reservation",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"reservation-documents",
										"{{_reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Optional) Get Availability of the location after the cancellation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the body', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.locations).to.exist;",
											"    pm.expect(data.locations).to.be.an('array');",
											"    pm.expect(data.locations).to.not.be.empty;",
											"    pm.expect(data.locations[0]).to.exist;",
											"    pm.expect(data.locations[0]).to.be.an('object');",
											"    pm.expect(data.locations[0].id).to.not.be.empty;",
											"    pm.expect(data.locations[0].id).to.be.eq(pm.environment.get('location_id'));",
											"",
											"    // Confirm that the cancellation has changed the inventory values",
											"    pm.expect(data.locations[0].records[0].atf).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_atf'), 10));",
											"    pm.expect(data.locations[0].records[0].ato).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_ato'), 10));",
											"    pm.expect(data.locations[0].records[0].reserved).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_reserved'), 10));",
											"    pm.expect(data.locations[0].records[0].onHand).to.be.eq(parseInt(pm.collectionVariables.get('_location_availability_before_reservation_onHand'), 10));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{_authorization_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"locations\": [\n        \"{{location_id}}\"\n    ],\n    \"skus\": [\n        \"{{product_sku}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{api_url}}/inventory/availability/{{api_version}}/organizations/{{tenant_group_id}}/availability-records/actions/get-availability",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"inventory",
										"availability",
										"{{api_version}}",
										"organizations",
										"{{tenant_group_id}}",
										"availability-records",
										"actions",
										"get-availability"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "# Salesforce Omni Channel Inventory\n\n## Reservations\n\nThis collection contains use cases related to the inventory reservations operations.\n\nMore infos [Salesforce Commerce Developer Center](https://developer.commercecloud.com/s/api-details/a003k00000Wa43fAAB/commerce-cloud-developer-centerinventoryreservations)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "_import_records_import_list_length",
			"value": ""
		},
		{
			"key": "_reservation_id",
			"value": ""
		},
		{
			"key": "_transfer_unique_request_id",
			"value": ""
		},
		{
			"key": "_fulfillment_unique_request_id",
			"value": ""
		},
		{
			"key": "_fulfillment_id",
			"value": ""
		},
		{
			"key": "_export_availability_records_per_location_group_status_link",
			"value": ""
		},
		{
			"key": "_release_unique_request_id",
			"value": ""
		},
		{
			"key": "_location_availability_before_reservation_atf",
			"value": ""
		},
		{
			"key": "_location_availability_before_reservation_ato",
			"value": ""
		},
		{
			"key": "_location_availability_before_reservation_reserved",
			"value": ""
		},
		{
			"key": "_location_availability_before_reservation_onHand",
			"value": ""
		},
		{
			"key": "_location_group_availability_before_reservation_atf",
			"value": ""
		},
		{
			"key": "_location_group_availability_before_reservation_ato",
			"value": ""
		},
		{
			"key": "_location_group_availability_before_reservation_reserved",
			"value": ""
		},
		{
			"key": "_location_group_availability_before_reservation_onHand",
			"value": ""
		},
		{
			"key": "_event_log_export_end",
			"value": ""
		},
		{
			"key": "_event_log_export_start",
			"value": ""
		},
		{
			"key": "__export_event_log_activity_link",
			"value": ""
		},
		{
			"key": "_update_inventory_record_safety",
			"value": ""
		},
		{
			"key": "_update_inventory_record_onHand",
			"value": ""
		},
		{
			"key": "_update_inventory_record_request_id",
			"value": ""
		},
		{
			"key": "_update_inventory_record_new_future",
			"value": ""
		},
		{
			"key": "_update_inventory_record_new_safety",
			"value": ""
		},
		{
			"key": "_update_inventory_record_new_onHand",
			"value": ""
		},
		{
			"key": "_update_inventory_record_current_date",
			"value": ""
		},
		{
			"key": "_update_inventory_record_future_date",
			"value": ""
		},
		{
			"key": "_export_location_graph_download_link",
			"value": ""
		},
		{
			"key": "_batch_update_record_uuid",
			"value": ""
		},
		{
			"key": "_batch_update_record_new_future",
			"value": ""
		},
		{
			"key": "_batch_update_record_new_safety",
			"value": ""
		},
		{
			"key": "_batch_update_record_new_onHand",
			"value": ""
		},
		{
			"key": "_batch_update_record_current_date",
			"value": ""
		},
		{
			"key": "_batch_update_record_future_date",
			"value": ""
		},
		{
			"key": "_authorization_key",
			"value": ""
		},
		{
			"key": "_import_availability_records_import_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "_import_availability_records_status_report_link",
			"value": ""
		},
		{
			"key": "_export_event_log_status_link",
			"value": ""
		},
		{
			"key": "_export_event_log_activity_link",
			"value": ""
		},
		{
			"key": "_batch_update_record_safety",
			"value": ""
		},
		{
			"key": "_batch_update_record_onHand",
			"value": ""
		},
		{
			"key": "_import_availability_records_status_link",
			"value": ""
		},
		{
			"key": "_import_availability_records_upload_link",
			"value": ""
		}
	]
}